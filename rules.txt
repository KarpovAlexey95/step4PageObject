Code Style: базовые принципы
Имена переменных и функций
Одним из самых важных аспектов читаемого кода является именование: будь то объявление переменных, описание функций, названия классов и так далее. Очень важно, чтобы все имена, которые вы присваивали сущностям, были осмысленными и отражали реальную суть этого объекта. Избегайте однобуквенных и бессмысленных названий типа var1, x, y, my_function, class2 и так далее. Идеальный код — самодокументируемый, к которому не нужны дополнительные пояснения. Если вы чувствуете, что вам хочется написать поясняющий комментарий, это повод переписать код так, чтобы комментарий не понадобился.

Обычно внутри каждой компании есть дополнительные внутренние соглашения о том, как именовать переменные, но общие правила в индустрии примерно одинаковые.

Функции пишутся через_нижнее_подчеркивание:

def test_guest_can_see_lesson_name_in_lesson_without_course(self, driver):

Классы пишут с помощью CamelCase:

class TestLessonNameWithoutCourseForGuest():

Константы пишут в стиле UPPERCASE:

MAIN_PAGE = "/catalog"

Максимальная простота кода
Здесь нам на помощь приходят известные принципы написания кода DRY (Don't repeat yourself) и KISS (Keep it simple, stupid).

Пишите максимально простой код везде, где это возможно.
Не используйте переусложненных конструкций без большой необходимости (поменьше лямбда-выражений, map и разной другой магии). Если кусок кода можно заменить конструкцией более простой для понимания — замените.
Пишите максимально линейный код, где это возможно, это проще для восприятия.
Избегайте большой вложенности блоков кода, такие конструкции тяжело читать.
Если можно вынести повторяющуюся логику куда-то, выносите, не повторяйтесь.
По возможности пишите явный код вместо неявного. Чем меньше магии "под капотом", тем лучше.


Code Style в автотестах
Здесь мы попытались собрать важные принципы написания автотестов:

Стремитесь к максимальной линейности кода тестов: избегайте ветвления и циклов в тест-кейсах. Если хочется добавить в тесте if, значит, нужно разбить этот тест на два теста или подготовить тестовое окружение так, чтобы не было необходимости использовать ветвление.
Избегайте зависимых тестов, которые нужно запускать строго в определенном порядке. При росте количества автотестов вы захотите запускать их в несколько потоков параллельно, что будет невозможно при наличии зависимых тестов. А еще зависимые тесты очень не надежны. Подробнее: http://barancev.github.io/test-deps-are-evil/
Стремитесь к тому, чтобы тест не полагался на контент, а готовил данные самостоятельно (и удалял после завершения). Используйте чистые браузеры и новых пользователей для лучшей воспроизводимости.
Абсолютная линейность проверок. Когда вы пишете assert-утверждения в функциях, не следует использовать ветвления и циклы. Логика проверок должна быть линейна, иначе разбор багов и починка автотестов будут стоить очень дорого.
Именуйте проверки в одинаковом стиле, чтобы по первому взгляду можно было понять, что это именно проверка. Например, можно именовать функции по шаблону should_be_smth:
def should_be_reply_comment()
Тесты именуются в одинаковом стиле. Имена тестов должны хорошо отражать различия в похожих сценариях. Можно использовать те же подходы, что и при добавлении имен к тест-кейсам в тестовой документации. Например, test_guest_can_see_teach_button() — обратите внимание на явное указание на роль пользователя.
Одинаковые тесты, которые отличаются только каким-то контентом (например, языком интерфейса), следует не копировать, а параметризовать.
Пишите максимально атомарные и неделимые тесты. Не нужно писать один мега-тест, который проверяет вообще всё, напишите лучше десяток маленьких — проще будет локализовать проблему, когда она возникнет.
Если у вас нет большого опыта в написании кода, в статьях по ссылкам вы можете найти дополнительные рекомендации по оформлению кода.

Английский язык:

https://docs.python-guide.org/writing/style/

https://www.python.org/dev/peps/pep-0008/

Русский язык:

https://habr.com/ru/post/266969/

https://habr.com/ru/post/206868/

https://pythonworld.ru/osnovy/pep-8-rukovodstvo-po-napisaniyu-koda-na-python.html
